import asyncio

from aiogram import types, F
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery

from bot_app.config import FAQ_TEMPLATES
from bot_app.db.admin.base import FAQDatabase
from bot_app.db.translation_db import TranslationDB
from bot_app.markups.user import back_and_support, go_to_main_manu, get_numbered_questions_keyboard
from bot_app.misc import router
from bot_app.utils.neural_search import NeuralSearch
from bot_app.utils.rate_limiter import check_rate_limit


@router.message(lambda message: message.text in ["–û–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∞–∂—ë—Ä–æ–≤", "Simulators description"])
async def button_simulator_description(message: types.Message):
    await message.answer(await TranslationDB.get_admin_translation(message.from_user.id, "simulator_description"),
                         reply_markup=back_and_support(await TranslationDB.get_user_language_code(message.from_user.id)))


@router.message(lambda message: message.text in ["–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–ø—Ü–∏–π", "Description of additional options"])
async def button_option_description(message: types.Message):
    await message.answer(await TranslationDB.get_admin_translation(message.from_user.id, "option_description"),
                         reply_markup=back_and_support(await TranslationDB.get_user_language_code(message.from_user.id)))


@router.message(F.text == "FAQ")
async def button_faq(message: types.Message):
    await message.answer(await TranslationDB.get_admin_translation(message.from_user.id, "FAQ"),
                         reply_markup=go_to_main_manu(await TranslationDB.get_user_language_code(message.from_user.id)))


@router.message(lambda message: message.text in ["–î—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã", "Other questions"])
async def button_faq(message: types.Message):
    await message.answer(await TranslationDB.get_admin_translation(message.from_user.id, "other_issues"),
                         reply_markup=go_to_main_manu(await TranslationDB.get_user_language_code(message.from_user.id)))


@router.message(F.text)
async def neural_answer_question(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_lang = await TranslationDB.get_user_language_code(message.from_user.id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏ –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤
    is_allowed, wait_seconds = await check_rate_limit(message.from_user.id)
    if not is_allowed:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —è–∑—ã–∫–∞
        if user_lang == "en":
            limit_message = f"‚ö†Ô∏è **Rate limit exceeded**. Please wait {wait_seconds} seconds before sending your next question."
        else:
            limit_message = f"‚ö†Ô∏è **–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤**. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ {wait_seconds} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞."

        await message.answer(limit_message, parse_mode="Markdown")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_question = message.text.strip().lower()

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤–æ–π –ø–æ–∏—Å–∫
    await message.answer("üß† *–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤–æ–π –ø–æ–∏—Å–∫*...", parse_mode="Markdown")
    await asyncio.sleep(2)

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤–æ–π –ø–æ–∏—Å–∫ –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –ø–æ—Ö–æ–∂–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
    matches_raw = await NeuralSearch.find_similar_questions(
        query=user_question,
        lang=user_lang,
        limit=6,
        threshold=0.6  # –ü–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ö–æ–¥—Å—Ç–≤–∞
    )

    if matches_raw:
        templates = FAQ_TEMPLATES[user_lang]
        message_text = templates['choose_question'] + "\n\n"

        matches = []
        for i, (matched_question, faq_id, score) in enumerate(matches_raw, 1):
            number_emoji = f"{i}Ô∏è‚É£"
            matches.append((matched_question, faq_id))
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ö–æ–¥—Å—Ç–≤–∞ –¥–ª—è –±–æ–ª–µ–µ –ø–æ–Ω—è—Ç–Ω–æ–≥–æ –¥–µ–±–∞–≥–∞
            message_text += f"{number_emoji} {matched_question} (—Å—Ö–æ–¥—Å—Ç–≤–æ: {score:.2f})\n"

        message_text += templates['click_button']

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await message.answer(
            message_text,
            reply_markup=get_numbered_questions_keyboard(matches)
        )
        return

    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–ø–æ–Ω–∏–º–∞–Ω–∏–∏
    await message.answer(await TranslationDB.get_translation(message.from_user.id, "question_not_understood"))


# @router.message(F.text)
# async def answer_question(message: types.Message):
#     # –û—á–∏—â–∞–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
#     user_question = PUNCTUATION_PATTERN.sub(' ', message.text.strip().lower())
#     user_lang = await TranslationDB.get_user_language_code(message.from_user.id)
#
#     # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ —è–∑—ã–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#     rows = await FAQDatabase.get_faq_data_by_language(user_lang)
#     if not rows:
#         await message.answer(await TranslationDB.get_translation(message.from_user.id, "question_not_understood"))
#         return
#
#     # –†–∞—Å—à–∏—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ª–µ–º–º–∞—Ç–∏–∑–∞—Ü–∏–µ–π
#     expanded_query_words = expand_query(user_question)
#
#     # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å –∏—Ö ID
#     questions_with_ids = []
#     for row in rows:
#         # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å —Ç–∞–∫ –∂–µ, –∫–∞–∫ –∏ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#         question_text = row['question'].strip().lower()
#         # –û—á–∏—â–∞–µ–º –≤–æ–ø—Ä–æ—Å –æ—Ç –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
#         clean_question = PUNCTUATION_PATTERN.sub(' ', question_text)
#         question_words = set(clean_question.split())
#         normalized_words = {normalize_word(word) for word in question_words if word}
#
#         questions_with_ids.append((question_text, normalized_words, row['faq_id']))
#
#     # –§–∏–ª—å—Ç—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Å–ª–æ–≤–æ –∏–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
#     filtered_questions = []
#     for q_text, q_norm_words, faq_id in questions_with_ids:
#         # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤ —Å–ª–æ–≤
#         if expanded_query_words.intersection(q_norm_words):
#             filtered_questions.append((q_text, faq_id))
#
#     # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ—á–µ—Ç–∫–∏–π –ø–æ–∏—Å–∫ –¥–ª—è –Ω–∏—Ö
#     if filtered_questions:
#         questions = [q for q, _ in filtered_questions]
#
#         from rapidfuzz import process
#         # –ü–æ–Ω–∏–∂–∞–µ–º –ø–æ—Ä–æ–≥ –æ—Ü–µ–Ω–∫–∏ –¥–æ 60, —á—Ç–æ–±—ã –∑–∞—Ö–≤–∞—Ç–∏—Ç—å –±–æ–ª—å—à–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
#         matches_raw = process.extract(user_question, questions, limit=6, score_cutoff=60)
#
#         if matches_raw:
#             templates = FAQ_TEMPLATES[user_lang]
#             message_text = templates['choose_question'] + "\n\n"
#
#             matches = []
#             for i, (matched_question, score, _) in enumerate(matches_raw, 1):
#                 number_emoji = f"{i}Ô∏è‚É£"
#
#                 # –ù–∞—Ö–æ–¥–∏–º faq_id –¥–ª—è —Å–æ–≤–ø–∞–≤—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
#                 for q, faq_id in filtered_questions:
#                     if q == matched_question:
#                         matches.append((matched_question, faq_id))
#                         message_text += f"{number_emoji} {matched_question}\n"
#                         break
#
#             message_text += templates['click_button']
#
#             await message.answer(
#                 message_text,
#                 reply_markup=get_numbered_questions_keyboard(matches)
#             )
#             return
#
#     await message.answer(await TranslationDB.get_translation(message.from_user.id, "question_not_understood"))


@router.callback_query(F.data.startswith("faq:"))
async def handle_faq_callback(callback: CallbackQuery, state: FSMContext):
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –∏–∑ callback_data
        faq_id = int(callback.data.split(":")[1])

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫—É –∏–∑ –ë–î
        faq = await FAQDatabase.get_question_by_id(faq_id)

        if not faq:
            await callback.message.edit_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        lang = await TranslationDB.get_user_language_code(callback.from_user.id)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ
        if lang == "en":
            answer = faq["answer_en"]
        else:
            answer = faq["answer_ru"]

        await callback.message.edit_text(answer)

    except Exception as e:
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
        print(f"Callback error: {e}")


@router.message(~F.text)
async def answer_question_error(message: types.Message):
    pass

