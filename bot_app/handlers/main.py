from aiogram import types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardRemove

from bot_app import config
from bot_app.config import ADMIN_ID
from bot_app.db.user.base import UserDatabase
from bot_app.markups.admin import admin_main_menu
from bot_app.markups.user import go_to_main_manu, main_menu_keyboard, phone_request_keyboard
from bot_app.misc import router, bot
from bot_app.states.user import UserInfo, UserPhone


@router.message(Command("start"))
async def start_handler(message: types.Message):
    text = ("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø ‚Äì –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ PROLESKI. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? "
            "–í–æ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –ø–æ –∫–æ—Ç–æ—Ä—ã–º —è –º–æ–≥—É –≤–∞—Å –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å.")
    if message.from_user.id == config.ADMIN_ID:
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ –±–æ—Å—Å.", reply_markup=admin_main_menu())
        return
    await UserDatabase.add_user(message.from_user.id, message.from_user.full_name, message.from_user.username)
    await message.answer(text, reply_markup=main_menu_keyboard())


@router.message(F.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def main_menu(message: types.Message, state: FSMContext):
    await state.clear()
    if message.from_user.id == config.ADMIN_ID:
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ –±–æ—Å—Å.", reply_markup=admin_main_menu())
        return
    text = ("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø ‚Äì –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ PROLESKI. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? "
            "–í–æ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –ø–æ –∫–æ—Ç–æ—Ä—ã–º —è –º–æ–≥—É –≤–∞—Å –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å.")
    await message.answer(text, reply_markup=main_menu_keyboard())


@router.message(F.text == "‚òéÔ∏è–°–≤—è–∑—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º")
async def select_channel(message: types.Message, state: FSMContext):
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(UserInfo.user_issue)


@router.message(UserInfo.user_issue)
async def select_channel(message: types.Message, state: FSMContext):
    await bot.send_message(chat_id=ADMIN_ID, text=message.text)
    await state.clear()
    await message.answer("–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –≤–æ–ø—Ä–æ—Å! –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –º–µ–Ω–µ–¥–∂–µ—Ä –≤–∞–º –æ—Ç–≤–µ—Ç–∏—Ç",
                         reply_markup=go_to_main_manu())


@router.message(F.text == "üìû–û—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
async def select_channel(message: types.Message, state: FSMContext):
    await message.answer("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏.",
                         reply_markup=phone_request_keyboard())
    await state.set_state(UserPhone.user_phone)


@router.message(UserPhone.user_phone, F.contact)
async def select_channel(message: types.Message, state: FSMContext):
    user = message.from_user
    phone_number = message.contact.phone_number if message.contact else "–ù–µ —É–∫–∞–∑–∞–Ω"
    print(type(phone_number))
    print(phone_number)
    username = f"@{user.username}" if user.username else "–ù–µ —É–∫–∞–∑–∞–Ω"
    full_name = f"{user.first_name} {user.last_name}" if user.first_name else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    await state.clear()
    await UserDatabase.save_user_phone(phone_number, message.from_user.id)

    text = f"""
    üìù –û—Ç—á–µ—Ç –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:
    - üÜî ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.id}
    - üë§ –ò–º—è: {full_name}
    - üì≤ –Æ–∑–µ—Ä–Ω–µ–π–º: {username}
    - üìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone_number}
    """
    await bot.send_message(chat_id=ADMIN_ID, text=text)
    await message.answer("‚úÖ–í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω, –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!",
                         reply_markup=go_to_main_manu())


@router.message(UserPhone.user_phone)
async def select_channel(message: types.Message):
    await message.answer("‚ùå–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –≤–≤–æ–¥ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.",
                         reply_markup=phone_request_keyboard())

